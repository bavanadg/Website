@model Website.Models.history

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>history</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ProcedureID, "Procedure Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @ViewBag.Procedure
            </div>
        </div>

        @Html.HiddenFor(model => model.HistoryID)

        <div class="form-group">
            @Html.LabelFor(model => model.Number, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Number, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.Content, new { id = "content" })
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
                <div id="description" style="height:250px"></div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" id="btnSubmit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var decodeHTML = function (html) {
            var txt = document.createElement('textarea');
            txt.innerHTML = html;
            return txt.value;
        };
        var toolbarOptions =
        [
            ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
            ['blockquote'/*, 'code-block'*/],
            ['image'],

            [{ 'list': 'ordered' }, { 'list': 'bullet' }],
            //[{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript

            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

            ['clean']                                         // remove formatting button
        ];

        var quill = new Quill('#description', {
            theme: 'snow',
            modules: {
                toolbar: {
                    container: toolbarOptions,
                    handlers: {
                        image: imageHandler
                    }
                }
            },
        });

        function imageHandler() {
            var range = this.quill.getSelection();
            var value = prompt('What is the image URL');
            if (value) {
                this.quill.insertEmbed(range.index, 'image', value, Quill.sources.USER);
            }
        }

        $(document).ready(function () {
            var decoded = decodeHTML(decodeHTML('@Model.Content'));
            quill.clipboard.dangerouslyPasteHTML(decoded);
        });
        $(function () {
            $("#btnSubmit").click(function () {
                $("#content").val(quill.root.innerHTML);
            });
        });
    </script>
}
